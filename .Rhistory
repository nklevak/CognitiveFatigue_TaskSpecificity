practice_full <- relevant_full %>%
filter(practice == "true")
# remove practice trials from relevant_full df
relevant_full <- relevant_full %>%
filter(practice != "true")
# parse bid values
full_with_bid <- relevant_full %>%
mutate(bid_value = as.integer(gsub("[^0-9]+", "", response)))
# make a column for the bid preceding each block
# spatial recall
full_with_bid <- full_with_bid %>%
mutate(condition_met = (prevBlockType == "spatial_recall" & switch_next_block == "false") |
(prevBlockType == "gradcpt" & switch_next_block == "true")) %>%
group_by(group = cumsum(condition_met)) %>%
mutate(fill_flag = if_else(row_number() <= (sr_per_block + 1) & condition_met, TRUE, FALSE)) %>%
mutate(bid_value = if(any(fill_flag)) first(bid_value[fill_flag]) else bid_value, blocks_completed = if (any(fill_flag)) first(blocks_completed[fill_flag]) else blocks_completed, prevBlockType = if(any(fill_flag)) first(prevBlockType[fill_flag]) else prevBlockType,task_switched = if(any(fill_flag)) first(switch_next_block[fill_flag]) else switch_next_block) %>%
ungroup() %>%
select(-group, -fill_flag,-condition_met)
# gradcpt
full_with_bid <- full_with_bid %>%
mutate(condition_met = (prevBlockType == "gradcpt" & switch_next_block == "false") |
(prevBlockType == "spatial_recall" & switch_next_block == "true")) %>%
group_by(group = cumsum(condition_met)) %>%
mutate(fill_flag = if_else(row_number() <= (gradcpt_per_block + 1) & condition_met, TRUE, FALSE)) %>%
mutate(bid_value = if(any(fill_flag)) first(bid_value[fill_flag]) else bid_value, blocks_completed = if (any(fill_flag)) first(blocks_completed[fill_flag]) else blocks_completed,prevBlockType = if(any(fill_flag)) first(prevBlockType[fill_flag]) else prevBlockType,task_switched = if(any(fill_flag)) first(switch_next_block[fill_flag]) else switch_next_block) %>%
ungroup() %>%
select(-group, -fill_flag,-switch_next_block)
## change everything in full_with_bid to be the right datatype
full_with_bid <- full_with_bid %>%
mutate(subj_id = as.numeric(run_id), blocks_completed = as.numeric(blocks_completed,na.RM = TRUE)) %>%
select(-run_id,-bonus,-overall_accuracy,-generated_BDM_value,-cpt_practice_accuracy,-question_order)
# get average bids per participant
avg_subj_bids <- full_with_bid %>%
filter(trial_type == "survey-text") %>%
group_by(subj_id) %>%
summarise(avg_bids = mean(bid_value,na.rm = TRUE),stdev_bids = sd(bid_value, na.rm = TRUE)) %>%
ungroup()
full_with_bid <- full_with_bid %>%
left_join(avg_subj_bids, by = "subj_id")
# make a column that represents how different (in stdev) the amount they want to switch is from their mean
full_with_bid <- full_with_bid %>%
mutate(bid_z_score = if_else(stdev_bids == 0, 0, (bid_value - avg_bids) / stdev_bids))
# make a column that says which block it currently is
full_with_bid <- full_with_bid %>%
mutate(curr_block_num = ifelse(is.na(blocks_completed), 1, blocks_completed + 1)) %>%
mutate(bid_z_score = if_else(curr_block_num == 1, 0, bid_z_score)) %>%
select(-blocks_completed, -sequence, -backwards, -responses, -score_pc, -score_ls,-avg_bids,-stdev_bids,-condition_met) %>%
filter(trial_type != "survey-text")
# calculate average accuracy per block
conversion <- c("true" = 1, "false" = 0)
avg_per_block <- full_with_bid %>%
filter(cpt_type != "transition") %>%
group_by(subj_id, curr_block_num,game_type) %>%
summarise (avg_accuracy = ifelse(game_type == "spatial_recall",mean(as.numeric(score_an)),mean(conversion[correct]))) %>%
ungroup()
full_with_bid <- full_with_bid %>%
filter(cpt_type != "transition") %>%
left_join(avg_per_block, by = "subj_id")
sr_practice_num <- 6
sr_per_block <- 6
gradcpt_practice_num <- 30
gradcpt_per_block <- 40
num_blocks <- 8
# add task_type labels (either "sr" or gng")
# remove instruction trials and other filler trials
relevant_full <- anonymized_data_full %>%
filter(trial_type != "instructions", trial_type != "preload", trial_type != "survey-multi-choice", trial_type != "html-keyboard-response",!grepl("screen", trial_type, ignore.case = TRUE)) %>%
select(-event_history)
# make a df for the practice trials
practice_full <- relevant_full %>%
filter(practice == "true")
# remove practice trials from relevant_full df
relevant_full <- relevant_full %>%
filter(practice != "true")
# parse bid values
full_with_bid <- relevant_full %>%
mutate(bid_value = as.integer(gsub("[^0-9]+", "", response)))
# make a column for the bid preceding each block
# spatial recall
full_with_bid <- full_with_bid %>%
mutate(condition_met = (prevBlockType == "spatial_recall" & switch_next_block == "false") |
(prevBlockType == "gradcpt" & switch_next_block == "true")) %>%
group_by(group = cumsum(condition_met)) %>%
mutate(fill_flag = if_else(row_number() <= (sr_per_block + 1) & condition_met, TRUE, FALSE)) %>%
mutate(bid_value = if(any(fill_flag)) first(bid_value[fill_flag]) else bid_value, blocks_completed = if (any(fill_flag)) first(blocks_completed[fill_flag]) else blocks_completed, prevBlockType = if(any(fill_flag)) first(prevBlockType[fill_flag]) else prevBlockType,task_switched = if(any(fill_flag)) first(switch_next_block[fill_flag]) else switch_next_block) %>%
ungroup() %>%
select(-group, -fill_flag,-condition_met)
# gradcpt
full_with_bid <- full_with_bid %>%
mutate(condition_met = (prevBlockType == "gradcpt" & switch_next_block == "false") |
(prevBlockType == "spatial_recall" & switch_next_block == "true")) %>%
group_by(group = cumsum(condition_met)) %>%
mutate(fill_flag = if_else(row_number() <= (gradcpt_per_block + 1) & condition_met, TRUE, FALSE)) %>%
mutate(bid_value = if(any(fill_flag)) first(bid_value[fill_flag]) else bid_value, blocks_completed = if (any(fill_flag)) first(blocks_completed[fill_flag]) else blocks_completed,prevBlockType = if(any(fill_flag)) first(prevBlockType[fill_flag]) else prevBlockType,task_switched = if(any(fill_flag)) first(switch_next_block[fill_flag]) else switch_next_block) %>%
ungroup() %>%
select(-group, -fill_flag,-switch_next_block)
## change everything in full_with_bid to be the right datatype
full_with_bid <- full_with_bid %>%
mutate(subj_id = as.numeric(run_id), blocks_completed = as.numeric(blocks_completed,na.RM = TRUE)) %>%
select(-run_id,-bonus,-overall_accuracy,-generated_BDM_value,-cpt_practice_accuracy,-question_order)
# get average bids per participant
avg_subj_bids <- full_with_bid %>%
filter(trial_type == "survey-text") %>%
group_by(subj_id) %>%
summarise(avg_bids = mean(bid_value,na.rm = TRUE),stdev_bids = sd(bid_value, na.rm = TRUE)) %>%
ungroup()
full_with_bid <- full_with_bid %>%
left_join(avg_subj_bids, by = "subj_id")
# make a column that represents how different (in stdev) the amount they want to switch is from their mean
full_with_bid <- full_with_bid %>%
mutate(bid_z_score = if_else(stdev_bids == 0, 0, (bid_value - avg_bids) / stdev_bids))
# make a column that says which block it currently is
full_with_bid <- full_with_bid %>%
mutate(curr_block_num = ifelse(is.na(blocks_completed), 1, blocks_completed + 1)) %>%
mutate(bid_z_score = if_else(curr_block_num == 1, 0, bid_z_score)) %>%
select(-blocks_completed, -sequence, -backwards, -responses, -score_pc, -score_ls,-avg_bids,-stdev_bids,-condition_met) %>%
filter(trial_type != "survey-text")
# calculate average accuracy per block
conversion <- c("true" = 1, "false" = 0)
avg_per_block <- full_with_bid %>%
filter(cpt_type != "transition") %>%
group_by(subj_id, curr_block_num) %>%
summarise (avg_accuracy = ifelse(game_type == "spatial_recall",mean(as.numeric(score_an)),mean(conversion[correct]))) %>%
ungroup()
full_with_bid <- full_with_bid %>%
filter(cpt_type != "transition") %>%
left_join(avg_per_block, by = "subj_id")
sr_practice_num <- 6
sr_per_block <- 6
gradcpt_practice_num <- 30
gradcpt_per_block <- 40
num_blocks <- 8
# add task_type labels (either "sr" or gng")
# remove instruction trials and other filler trials
relevant_full <- anonymized_data_full %>%
filter(trial_type != "instructions", trial_type != "preload", trial_type != "survey-multi-choice", trial_type != "html-keyboard-response",!grepl("screen", trial_type, ignore.case = TRUE)) %>%
select(-event_history)
# make a df for the practice trials
practice_full <- relevant_full %>%
filter(practice == "true")
# remove practice trials from relevant_full df
relevant_full <- relevant_full %>%
filter(practice != "true")
# parse bid values
full_with_bid <- relevant_full %>%
mutate(bid_value = as.integer(gsub("[^0-9]+", "", response)))
# make a column for the bid preceding each block
# spatial recall
full_with_bid <- full_with_bid %>%
mutate(condition_met = (prevBlockType == "spatial_recall" & switch_next_block == "false") |
(prevBlockType == "gradcpt" & switch_next_block == "true")) %>%
group_by(group = cumsum(condition_met)) %>%
mutate(fill_flag = if_else(row_number() <= (sr_per_block + 1) & condition_met, TRUE, FALSE)) %>%
mutate(bid_value = if(any(fill_flag)) first(bid_value[fill_flag]) else bid_value, blocks_completed = if (any(fill_flag)) first(blocks_completed[fill_flag]) else blocks_completed, prevBlockType = if(any(fill_flag)) first(prevBlockType[fill_flag]) else prevBlockType,task_switched = if(any(fill_flag)) first(switch_next_block[fill_flag]) else switch_next_block) %>%
ungroup() %>%
select(-group, -fill_flag,-condition_met)
# gradcpt
full_with_bid <- full_with_bid %>%
mutate(condition_met = (prevBlockType == "gradcpt" & switch_next_block == "false") |
(prevBlockType == "spatial_recall" & switch_next_block == "true")) %>%
group_by(group = cumsum(condition_met)) %>%
mutate(fill_flag = if_else(row_number() <= (gradcpt_per_block + 1) & condition_met, TRUE, FALSE)) %>%
mutate(bid_value = if(any(fill_flag)) first(bid_value[fill_flag]) else bid_value, blocks_completed = if (any(fill_flag)) first(blocks_completed[fill_flag]) else blocks_completed,prevBlockType = if(any(fill_flag)) first(prevBlockType[fill_flag]) else prevBlockType,task_switched = if(any(fill_flag)) first(switch_next_block[fill_flag]) else switch_next_block) %>%
ungroup() %>%
select(-group, -fill_flag,-switch_next_block)
## change everything in full_with_bid to be the right datatype
full_with_bid <- full_with_bid %>%
mutate(subj_id = as.numeric(run_id), blocks_completed = as.numeric(blocks_completed,na.RM = TRUE)) %>%
select(-run_id,-bonus,-overall_accuracy,-generated_BDM_value,-cpt_practice_accuracy,-question_order)
# get average bids per participant
avg_subj_bids <- full_with_bid %>%
filter(trial_type == "survey-text") %>%
group_by(subj_id) %>%
summarise(avg_bids = mean(bid_value,na.rm = TRUE),stdev_bids = sd(bid_value, na.rm = TRUE)) %>%
ungroup()
full_with_bid <- full_with_bid %>%
left_join(avg_subj_bids, by = "subj_id")
# make a column that represents how different (in stdev) the amount they want to switch is from their mean
full_with_bid <- full_with_bid %>%
mutate(bid_z_score = if_else(stdev_bids == 0, 0, (bid_value - avg_bids) / stdev_bids))
# make a column that says which block it currently is
full_with_bid <- full_with_bid %>%
mutate(curr_block_num = ifelse(is.na(blocks_completed), 1, blocks_completed + 1)) %>%
mutate(bid_z_score = if_else(curr_block_num == 1, 0, bid_z_score)) %>%
select(-blocks_completed, -sequence, -backwards, -responses, -score_pc, -score_ls,-avg_bids,-stdev_bids,-condition_met) %>%
filter(trial_type != "survey-text")
# calculate average accuracy per block
conversion <- c("true" = 1, "false" = 0)
avg_per_block <- full_with_bid %>%
filter(cpt_type != "transition") %>%
group_by(curr_block_num,subj_id) %>%
summarise (avg_accuracy = ifelse(game_type == "spatial_recall",mean(as.numeric(score_an)),mean(conversion[correct]))) %>%
ungroup()
full_with_bid <- full_with_bid %>%
filter(cpt_type != "transition") %>%
left_join(avg_per_block, by = "subj_id")
sr_practice_num <- 6
sr_per_block <- 6
gradcpt_practice_num <- 30
gradcpt_per_block <- 40
num_blocks <- 8
# add task_type labels (either "sr" or gng")
# remove instruction trials and other filler trials
relevant_full <- anonymized_data_full %>%
filter(trial_type != "instructions", trial_type != "preload", trial_type != "survey-multi-choice", trial_type != "html-keyboard-response",!grepl("screen", trial_type, ignore.case = TRUE)) %>%
select(-event_history)
# make a df for the practice trials
practice_full <- relevant_full %>%
filter(practice == "true")
# remove practice trials from relevant_full df
relevant_full <- relevant_full %>%
filter(practice != "true")
# parse bid values
full_with_bid <- relevant_full %>%
mutate(bid_value = as.integer(gsub("[^0-9]+", "", response)))
# make a column for the bid preceding each block
# spatial recall
full_with_bid <- full_with_bid %>%
mutate(condition_met = (prevBlockType == "spatial_recall" & switch_next_block == "false") |
(prevBlockType == "gradcpt" & switch_next_block == "true")) %>%
group_by(group = cumsum(condition_met)) %>%
mutate(fill_flag = if_else(row_number() <= (sr_per_block + 1) & condition_met, TRUE, FALSE)) %>%
mutate(bid_value = if(any(fill_flag)) first(bid_value[fill_flag]) else bid_value, blocks_completed = if (any(fill_flag)) first(blocks_completed[fill_flag]) else blocks_completed, prevBlockType = if(any(fill_flag)) first(prevBlockType[fill_flag]) else prevBlockType,task_switched = if(any(fill_flag)) first(switch_next_block[fill_flag]) else switch_next_block) %>%
ungroup() %>%
select(-group, -fill_flag,-condition_met)
# gradcpt
full_with_bid <- full_with_bid %>%
mutate(condition_met = (prevBlockType == "gradcpt" & switch_next_block == "false") |
(prevBlockType == "spatial_recall" & switch_next_block == "true")) %>%
group_by(group = cumsum(condition_met)) %>%
mutate(fill_flag = if_else(row_number() <= (gradcpt_per_block + 1) & condition_met, TRUE, FALSE)) %>%
mutate(bid_value = if(any(fill_flag)) first(bid_value[fill_flag]) else bid_value, blocks_completed = if (any(fill_flag)) first(blocks_completed[fill_flag]) else blocks_completed,prevBlockType = if(any(fill_flag)) first(prevBlockType[fill_flag]) else prevBlockType,task_switched = if(any(fill_flag)) first(switch_next_block[fill_flag]) else switch_next_block) %>%
ungroup() %>%
select(-group, -fill_flag,-switch_next_block)
## change everything in full_with_bid to be the right datatype
full_with_bid <- full_with_bid %>%
mutate(subj_id = as.numeric(run_id), blocks_completed = as.numeric(blocks_completed,na.RM = TRUE)) %>%
select(-run_id,-bonus,-overall_accuracy,-generated_BDM_value,-cpt_practice_accuracy,-question_order)
# get average bids per participant
avg_subj_bids <- full_with_bid %>%
filter(trial_type == "survey-text") %>%
group_by(subj_id) %>%
summarise(avg_bids = mean(bid_value,na.rm = TRUE),stdev_bids = sd(bid_value, na.rm = TRUE)) %>%
ungroup()
full_with_bid <- full_with_bid %>%
left_join(avg_subj_bids, by = "subj_id")
# make a column that represents how different (in stdev) the amount they want to switch is from their mean
full_with_bid <- full_with_bid %>%
mutate(bid_z_score = if_else(stdev_bids == 0, 0, (bid_value - avg_bids) / stdev_bids))
# make a column that says which block it currently is
full_with_bid <- full_with_bid %>%
mutate(curr_block_num = ifelse(is.na(blocks_completed), 1, blocks_completed + 1)) %>%
mutate(bid_z_score = if_else(curr_block_num == 1, 0, bid_z_score)) %>%
select(-blocks_completed, -sequence, -backwards, -responses, -score_pc, -score_ls,-avg_bids,-stdev_bids,-condition_met) %>%
filter(trial_type != "survey-text")
# calculate average accuracy per block
conversion <- c("true" = 1, "false" = 0)
avg_per_block <- full_with_bid %>%
filter(cpt_type != "transition") %>%
group_by(curr_block_num,subj_id) %>%
summarise (avg_accuracy = ifelse(game_type == "spatial_recall",mean(as.numeric(score_an)),mean(conversion[correct])))
full_with_bid <- full_with_bid %>%
filter(cpt_type != "transition") %>%
left_join(avg_per_block, by = "subj_id")
setwd("../../data/pilotA/")
csv_files <- list.files(pattern = "\\.csv$")
# Function to read a CSV file and convert all columns to character type
read_csv_as_character <- function(file) {
df <- read.csv(file, stringsAsFactors = FALSE)
df[] <- lapply(df, as.character)
return(df)
}
# Read each CSV file, ensuring all data is read as character, and combine them
combined_df <- bind_rows(lapply(csv_files, read_csv_as_character))
head(combined_df)
# take out ip info etc
anonymized_data_full <- combined_df %>%
select(-recorded_at,-ip,-user_agent,-referer,-sequence_length,
-accept_language,-device,-internal_node_id,-view_history)
# take out browser info (maybe bring this back in later if I want to look at
# different browser impact)
# also take out source code version (they are all the same but can add
# verification later)
# also take out screen information
anonymized_data_full <- anonymized_data_full %>%
select(-source_code_version, -contains("browser"),-contains("platform"),
-contains("screen"),-contains("width"),-contains("height"),
-contains("failed"),-condition,-success,-timeout)
# add task_type labels (either "sr" or gng")
# remove instruction trials and other filler trials
relevant_full <- anonymized_data_full %>%
filter(trial_type != "instructions", trial_type != "preload", trial_type != "survey-multi-choice", trial_type != "html-keyboard-response",!grepl("screen", trial_type, ignore.case = TRUE)) %>%
select(-event_history)
# make a df for the practice trials
practice_full <- relevant_full %>%
filter(practice == "true")
# remove practice trials from relevant_full df
relevant_full <- relevant_full %>%
filter(practice != "true")
# parse bid values
full_with_bid <- relevant_full %>%
mutate(bid_value = as.integer(gsub("[^0-9]+", "", response)))
# make a column for the bid preceding each block
# spatial recall
full_with_bid <- full_with_bid %>%
mutate(condition_met = (prevBlockType == "spatial_recall" & switch_next_block == "false") |
(prevBlockType == "gradcpt" & switch_next_block == "true")) %>%
group_by(group = cumsum(condition_met)) %>%
mutate(fill_flag = if_else(row_number() <= (sr_per_block + 1) & condition_met, TRUE, FALSE)) %>%
mutate(bid_value = if(any(fill_flag)) first(bid_value[fill_flag]) else bid_value, blocks_completed = if (any(fill_flag)) first(blocks_completed[fill_flag]) else blocks_completed, prevBlockType = if(any(fill_flag)) first(prevBlockType[fill_flag]) else prevBlockType,task_switched = if(any(fill_flag)) first(switch_next_block[fill_flag]) else switch_next_block) %>%
ungroup() %>%
select(-group, -fill_flag,-condition_met)
# gradcpt
full_with_bid <- full_with_bid %>%
mutate(condition_met = (prevBlockType == "gradcpt" & switch_next_block == "false") |
(prevBlockType == "spatial_recall" & switch_next_block == "true")) %>%
group_by(group = cumsum(condition_met)) %>%
mutate(fill_flag = if_else(row_number() <= (gradcpt_per_block + 1) & condition_met, TRUE, FALSE)) %>%
mutate(bid_value = if(any(fill_flag)) first(bid_value[fill_flag]) else bid_value, blocks_completed = if (any(fill_flag)) first(blocks_completed[fill_flag]) else blocks_completed,prevBlockType = if(any(fill_flag)) first(prevBlockType[fill_flag]) else prevBlockType,task_switched = if(any(fill_flag)) first(switch_next_block[fill_flag]) else switch_next_block) %>%
ungroup() %>%
select(-group, -fill_flag,-switch_next_block)
## change everything in full_with_bid to be the right datatype
full_with_bid <- full_with_bid %>%
mutate(subj_id = as.numeric(run_id), blocks_completed = as.numeric(blocks_completed,na.RM = TRUE)) %>%
select(-run_id,-bonus,-overall_accuracy,-generated_BDM_value,-cpt_practice_accuracy,-question_order)
avg_subj_bids <- full_with_bid %>%
filter(trial_type == "survey-text") %>%
group_by(subj_id) %>%
summarise(avg_bids = mean(bid_value,na.rm = TRUE),stdev_bids = sd(bid_value, na.rm = TRUE)) %>%
ungroup()
full_with_bid <- full_with_bid %>%
left_join(avg_subj_bids, by = "subj_id")
# make a column that represents how different (in stdev) the amount they want to switch is from their mean
full_with_bid <- full_with_bid %>%
mutate(bid_z_score = if_else(stdev_bids == 0, 0, (bid_value - avg_bids) / stdev_bids))
# make a column that says which block it currently is
full_with_bid <- full_with_bid %>%
mutate(curr_block_num = ifelse(is.na(blocks_completed), 1, blocks_completed + 1)) %>%
mutate(bid_z_score = if_else(curr_block_num == 1, 0, bid_z_score)) %>%
select(-blocks_completed, -sequence, -backwards, -responses, -score_pc, -score_ls,-avg_bids,-stdev_bids,-condition_met) %>%
filter(trial_type != "survey-text")
full_with_bid <- full_with_bid %>%
filter(cpt_type != "transition")
sr_practice_num <- 6
sr_per_block <- 6
gradcpt_practice_num <- 30
gradcpt_per_block <- 40
num_blocks <- 8
# add task_type labels (either "sr" or gng")
# remove instruction trials and other filler trials
relevant_full <- anonymized_data_full %>%
filter(trial_type != "instructions", trial_type != "preload", trial_type != "survey-multi-choice", trial_type != "html-keyboard-response",!grepl("screen", trial_type, ignore.case = TRUE)) %>%
select(-event_history)
# make a df for the practice trials
practice_full <- relevant_full %>%
filter(practice == "true")
# remove practice trials from relevant_full df
relevant_full <- relevant_full %>%
filter(practice != "true")
# parse bid values
full_with_bid <- relevant_full %>%
mutate(bid_value = as.integer(gsub("[^0-9]+", "", response)))
# make a column for the bid preceding each block
# spatial recall
full_with_bid <- full_with_bid %>%
mutate(condition_met = (prevBlockType == "spatial_recall" & switch_next_block == "false") |
(prevBlockType == "gradcpt" & switch_next_block == "true")) %>%
group_by(subj_id,group = cumsum(condition_met)) %>%
mutate(fill_flag = if_else(row_number() <= (sr_per_block + 1) & condition_met, TRUE, FALSE)) %>%
mutate(bid_value = if(any(fill_flag)) first(bid_value[fill_flag]) else bid_value, blocks_completed = if (any(fill_flag)) first(blocks_completed[fill_flag]) else blocks_completed, prevBlockType = if(any(fill_flag)) first(prevBlockType[fill_flag]) else prevBlockType,task_switched = if(any(fill_flag)) first(switch_next_block[fill_flag]) else switch_next_block) %>%
ungroup() %>%
select(-group, -fill_flag,-condition_met)
sr_practice_num <- 6
sr_per_block <- 6
gradcpt_practice_num <- 30
gradcpt_per_block <- 40
num_blocks <- 8
# add task_type labels (either "sr" or gng")
# remove instruction trials and other filler trials
relevant_full <- anonymized_data_full %>%
filter(trial_type != "instructions", trial_type != "preload", trial_type != "survey-multi-choice", trial_type != "html-keyboard-response",!grepl("screen", trial_type, ignore.case = TRUE)) %>%
select(-event_history)
# make a df for the practice trials
practice_full <- relevant_full %>%
filter(practice == "true")
# remove practice trials from relevant_full df
relevant_full <- relevant_full %>%
filter(practice != "true")
# parse bid values
full_with_bid <- relevant_full %>%
mutate(bid_value = as.integer(gsub("[^0-9]+", "", response)))
# make a column for the bid preceding each block
# spatial recall
full_with_bid <- full_with_bid %>%
mutate(condition_met = (prevBlockType == "spatial_recall" & switch_next_block == "false") |
(prevBlockType == "gradcpt" & switch_next_block == "true")) %>%
group_by(run_id,group = cumsum(condition_met)) %>%
mutate(fill_flag = if_else(row_number() <= (sr_per_block + 1) & condition_met, TRUE, FALSE)) %>%
mutate(bid_value = if(any(fill_flag)) first(bid_value[fill_flag]) else bid_value, blocks_completed = if (any(fill_flag)) first(blocks_completed[fill_flag]) else blocks_completed, prevBlockType = if(any(fill_flag)) first(prevBlockType[fill_flag]) else prevBlockType,task_switched = if(any(fill_flag)) first(switch_next_block[fill_flag]) else switch_next_block) %>%
ungroup() %>%
select(-group, -fill_flag,-condition_met)
# gradcpt
full_with_bid <- full_with_bid %>%
mutate(condition_met = (prevBlockType == "gradcpt" & switch_next_block == "false") |
(prevBlockType == "spatial_recall" & switch_next_block == "true")) %>%
group_by(run_id,group = cumsum(condition_met)) %>%
mutate(fill_flag = if_else(row_number() <= (gradcpt_per_block + 1) & condition_met, TRUE, FALSE)) %>%
mutate(bid_value = if(any(fill_flag)) first(bid_value[fill_flag]) else bid_value, blocks_completed = if (any(fill_flag)) first(blocks_completed[fill_flag]) else blocks_completed,prevBlockType = if(any(fill_flag)) first(prevBlockType[fill_flag]) else prevBlockType,task_switched = if(any(fill_flag)) first(switch_next_block[fill_flag]) else switch_next_block) %>%
ungroup() %>%
select(-group, -fill_flag,-switch_next_block)
## change everything in full_with_bid to be the right datatype
full_with_bid <- full_with_bid %>%
mutate(subj_id = as.numeric(run_id), blocks_completed = as.numeric(blocks_completed,na.RM = TRUE)) %>%
select(-run_id,-bonus,-overall_accuracy,-generated_BDM_value,-cpt_practice_accuracy,-question_order)
# get average bids per participant
avg_subj_bids <- full_with_bid %>%
filter(trial_type == "survey-text") %>%
group_by(subj_id) %>%
summarise(avg_bids = mean(bid_value,na.rm = TRUE),stdev_bids = sd(bid_value, na.rm = TRUE)) %>%
ungroup()
full_with_bid <- full_with_bid %>%
left_join(avg_subj_bids, by = "subj_id")
# make a column that represents how different (in stdev) the amount they want to switch is from their mean
full_with_bid <- full_with_bid %>%
mutate(bid_z_score = if_else(stdev_bids == 0, 0, (bid_value - avg_bids) / stdev_bids))
# make a column that says which block it currently is
full_with_bid <- full_with_bid %>%
mutate(curr_block_num = ifelse(is.na(blocks_completed), 1, blocks_completed + 1)) %>%
mutate(bid_z_score = if_else(curr_block_num == 1, 0, bid_z_score)) %>%
select(-blocks_completed, -sequence, -backwards, -responses, -score_pc, -score_ls,-avg_bids,-stdev_bids,-condition_met) %>%
filter(trial_type != "survey-text")
full_with_bid <- full_with_bid %>%
filter(cpt_type != "transition")
# calculate average accuracy per block
conversion <- c("true" = 1, "false" = 0)
avg_per_block <- full_with_bid %>%
filter(cpt_type != "transition") %>%
group_by(curr_block_num,subj_id) %>%
summarise (avg_accuracy = ifelse(game_type == "spatial_recall",mean(as.numeric(score_an)),mean(conversion[correct])))
full_with_bid <- full_with_bid %>%
filter(cpt_type != "transition") %>%
left_join(avg_per_block, by = "subj_id")
sr_practice_num <- 6
sr_per_block <- 6
gradcpt_practice_num <- 30
gradcpt_per_block <- 40
num_blocks <- 8
# add task_type labels (either "sr" or gng")
# remove instruction trials and other filler trials
relevant_full <- anonymized_data_full %>%
filter(trial_type != "instructions", trial_type != "preload", trial_type != "survey-multi-choice", trial_type != "html-keyboard-response",!grepl("screen", trial_type, ignore.case = TRUE)) %>%
select(-event_history)
# make a df for the practice trials
practice_full <- relevant_full %>%
filter(practice == "true")
# remove practice trials from relevant_full df
relevant_full <- relevant_full %>%
filter(practice != "true")
# parse bid values
full_with_bid <- relevant_full %>%
mutate(bid_value = as.integer(gsub("[^0-9]+", "", response)))
# make a column for the bid preceding each block
# spatial recall
full_with_bid <- full_with_bid %>%
mutate(condition_met = (prevBlockType == "spatial_recall" & switch_next_block == "false") |
(prevBlockType == "gradcpt" & switch_next_block == "true")) %>%
group_by(run_id,group = cumsum(condition_met)) %>%
mutate(fill_flag = if_else(row_number() <= (sr_per_block + 1) & condition_met, TRUE, FALSE)) %>%
mutate(bid_value = if(any(fill_flag)) first(bid_value[fill_flag]) else bid_value, blocks_completed = if (any(fill_flag)) first(blocks_completed[fill_flag]) else blocks_completed, prevBlockType = if(any(fill_flag)) first(prevBlockType[fill_flag]) else prevBlockType,task_switched = if(any(fill_flag)) first(switch_next_block[fill_flag]) else switch_next_block) %>%
ungroup() %>%
select(-group, -fill_flag,-condition_met)
# gradcpt
full_with_bid <- full_with_bid %>%
mutate(condition_met = (prevBlockType == "gradcpt" & switch_next_block == "false") |
(prevBlockType == "spatial_recall" & switch_next_block == "true")) %>%
group_by(run_id,group = cumsum(condition_met)) %>%
mutate(fill_flag = if_else(row_number() <= (gradcpt_per_block + 1) & condition_met, TRUE, FALSE)) %>%
mutate(bid_value = if(any(fill_flag)) first(bid_value[fill_flag]) else bid_value, blocks_completed = if (any(fill_flag)) first(blocks_completed[fill_flag]) else blocks_completed,prevBlockType = if(any(fill_flag)) first(prevBlockType[fill_flag]) else prevBlockType,task_switched = if(any(fill_flag)) first(switch_next_block[fill_flag]) else switch_next_block) %>%
ungroup() %>%
select(-group, -fill_flag,-switch_next_block)
## change everything in full_with_bid to be the right datatype
full_with_bid <- full_with_bid %>%
mutate(subj_id = as.numeric(run_id), blocks_completed = as.numeric(blocks_completed,na.RM = TRUE)) %>%
select(-run_id,-bonus,-overall_accuracy,-generated_BDM_value,-cpt_practice_accuracy,-question_order)
# get average bids per participant
avg_subj_bids <- full_with_bid %>%
filter(trial_type == "survey-text") %>%
group_by(subj_id) %>%
summarise(avg_bids = mean(bid_value,na.rm = TRUE),stdev_bids = sd(bid_value, na.rm = TRUE)) %>%
ungroup()
full_with_bid <- full_with_bid %>%
left_join(avg_subj_bids, by = "subj_id")
# make a column that represents how different (in stdev) the amount they want to switch is from their mean
full_with_bid <- full_with_bid %>%
mutate(bid_z_score = if_else(stdev_bids == 0, 0, (bid_value - avg_bids) / stdev_bids))
# make a column that says which block it currently is
full_with_bid <- full_with_bid %>%
mutate(curr_block_num = ifelse(is.na(blocks_completed), 1, blocks_completed + 1)) %>%
mutate(bid_z_score = if_else(curr_block_num == 1, 0, bid_z_score)) %>%
select(-blocks_completed, -sequence, -backwards, -responses, -score_pc, -score_ls,-avg_bids,-stdev_bids,-condition_met) %>%
filter(trial_type != "survey-text")
full_with_bid <- full_with_bid %>%
filter(cpt_type != "transition")
# calculate average accuracy per block
conversion <- c("true" = 1, "false" = 0)
avg_per_block <- full_with_bid %>%
filter(cpt_type != "transition") %>%
group_by(subj_id,curr_block_num) %>%
summarise (avg_accuracy = ifelse(game_type == "spatial_recall",mean(as.numeric(score_an)),mean(conversion[correct])))
full_with_bid <- full_with_bid %>%
filter(cpt_type != "transition") %>%
left_join(avg_per_block, by = "subj_id")
